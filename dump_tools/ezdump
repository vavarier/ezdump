#!/usr/bin/env bash
# \author bogdzn

#####################################
############ VARIABLES ##############
#####################################

# print colors
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Cyan='\e[0;36m'         # Cyan
NC="\e[m"               # Color Reset

PKG_HELPER=""
CSFML_SCRIPT_ADDRESS="https://raw.githubusercontent.com/Epitech/dump/master/build_csfml.sh"

#####################################
############ FUNCTIONS ##############
#####################################

display_help () {
    printf "Welcome to ${Yellow}Bogdzn's ezdump script${NC}, a basic tool to quickly dump whatever you need !\n"
    printf "Here are the options you might need:\n"
    printf "\t${Cyan}-h\t${NC}Display this message.\n"
    printf "\t${Cyan}-d\t${NC}Sets the dotfiles repository url (For your bashrc, etc...).\n"
    printf "\t${Cyan}-f\t${NC}Sets the package list file path.\n"
    printf "\t${Cyan}-y\t${NC}Will always answer yes.\n"
    printf "\t${Cyan}-b\t${NC}Sets debug mode.\n"
}

welcome () { printf "Welcome to ${Yellow}Bogdzn's ezdump script !${NC}.\nInstallation starting now ...\n" ; }

install_criterion () {
    URL="https://github.com/snaipe/criterion/releases/download/v2.3.2"
    TARBALL="criterion-v2.3.2-linux-x86_64.tar.bz2"
    DIR="criterion-v2.3.2"
    DST="/usr/local/"

    cd /tmp && rm "$TARBALL"; rm -rf "$DIR"
    install "wget"
    printf "\n${Red}Installing Criterion${NC}\n"
    wget "${URL}/${TARBALL}" &>/dev/null && tar xjf "$TARBALL" &>/dev/null
    sudo sh -c "echo "/usr/local/lib" > /etc/ld.so.conf.d/criterion.conf && cp -r "$DIR"/include/* $"DST"/include && cp -r "$DIR"/lib/* "$DST"/lib/" &>/dev/null
}

install_csfml () { curl "$CSFML_SCRIPT_ADDRESS" 2>/dev/null | sudo bash &> /dev/null ; }

update () {
    printf "${Yellow}Updating packages\n${NC}"
    case "$OS_TYPE" in
        archlinux) sudo pacman --noconfirm -Syu &> /dev/null ;;
        debian) sudo apt -y update &> /dev/null && sudo apt -y upgrade &> /dev/null ;;
        fedora) sudo dnf -y update &> /dev/null ;;
        opensuse) sudo zypper -y update &> /dev/null ;;
    esac
}

get_pkg_manager () {
    case "$OS_TYPE" in
        archlinux) echo "sudo pacman --noconfirm --needed -S" ;;
        debian) echo "sudo apt-get -y install" ;;
        fedora) echo "sudo dnf -y install" ;;
        opensuse) echo "sudo zypper -y install" ;;
        *) echo "" ;;
    esac
}

install () {
    printf "${Yellow}Installing ${NC}${Blue}"$1"${NC}\n"
    which "${1}" 2> /dev/null && {
        printf "${Yellow}Already installed...skipping...\n"${NC}"" &&
        return ;
    }

    bash -c "$(get_pkg_manager) "$1"" &> /dev/null || bash -c "$"PKG_HELPER" "$1"" &> /dev/null
}

get_package_helper () {
    if [[ "$OS_TYPE" = "archlinux" ]]; then
        install "patch gcc git make cmake go"
        git clone https://aur.archlinux.org/yay-git.git &>/dev/null && cd yay-git
        sudo makepkg -si &> /dev/null
        PKG_HELPER="yay -S --needed --noconfirm"
    else
        install "flatpak"
        PKG_HELPER="sudo flatpak install"
    fi
}

install_loop () {
    while IFS= read -r line || [[ -n "$line" ]]; do
        install "$line"
    done < "$PKG_FILE_PATH"
}

get_os () {
    which zypper &> /dev/null && echo "opensuse"
    which pacman &> /dev/null && echo "archlinux"
    which dnf &> /dev/null && echo "fedora"
    which apt &> /dev/null && echo "debian"
}

dotfiles () {
    printf "${Cyan}Installing dotfiles...${NC}\n"
    git clone "${DOTFILES_URL}" df &> /dev/null
    mv -u df/.config ~/ &>/dev/null ; mv -u df/.*rc ~/ &>/dev/null
}

disable_systembeep () { sudo rmmod pcskpkr &> /dev/null && echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf ; }

get_default_pkgfile () {
    LIST_URL="https://raw.githubusercontent.com/bogdzn/ezdump/master/pkg_lists/"
    curl -LO "${LIST_URL}${OS_TYPE}" &> /dev/null && mv "$OS_TYPE" pkgs
}

init_script () {
    while getopts "hd:f:yb" opt; do case "$opt" in
        h) display_help && exit 0 ;;
        d) DOTFILES_URL=${OPTARG} ;;
        f) PKG_FILE_PATH=${OPTARG} ;;
        *) printf "${Red}/!\\${NC} Invalid option: -${Yellow}%s${NC}\n" "$OPTARG" && exit 1 ;;
    esac done

    OS_TYPE=$(get_os)
    PKG_MANAGER=$(get_pkg_manager)
    [ -z "$DOTFILES_URL" ] && DOTFILES_URL="https://github.com/bogdzn/dotfiles"
    [ -z "$PKG_FILE_PATH" ] && PKG_FILE_PATH="./pkgs" && get_default_pkgfile

    if [[ "$OS_TYPE" = "" ]] ; then
        printf "${Red}Error:${NC} Unsupported distribution.\n"
        printf "Only ${Cyan}Archlinux${NC}, ${Red}Debian${NC}, ${Blue}Fedora${NC} and ${Green}OpenSUSE${NC} are supported.\n"
        printf "Please modify the script or file an issue here: https://github.com/bogdzn/ezdump\n"
        exit 1
    fi
}

#####################################
############# SCRIPT ################
#####################################

init_script "$@"

welcome

update

get_package_helper

install_loop

install_csfml

install_criterion

dotfiles

disable_systembeep

printf "${Green}All done ! You config is ready.${NC}\n\n"

